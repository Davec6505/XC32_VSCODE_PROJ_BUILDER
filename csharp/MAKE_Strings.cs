using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Intrinsics.Arm;
using System.Text;
using System.Threading.Tasks;

namespace generate_project
{
    internal class MAKE_Strings
    {


            public static string Module { get; set; }
            public static string Device { get; set; }

            //constructor
            public MAKE_Strings(string? module, string? device)
            {
                Module = module ?? "MyPIC32MZProject";
                Device = device ?? "32MZ1024EFH064";
            }
        public string Get_SRCMakefileContent()
        {
            var sb = new StringBuilder();
            sb.AppendLine($"# {Module} Makefile.");
            sb.AppendLine($"# {DateTime.Now:yyyy-MM-dd HH:mm:ss}");
            sb.AppendLine($"# DFP (Device Family Pack) configuration");
            sb.AppendLine("# These variables should be passed from the root Makefile");
            sb.AppendLine("DFP_DIR := $(DFP)");
            sb.AppendLine("DFP_INCLUDE := $(DFP)/include");
            sb.AppendLine();
            sb.AppendLine("# Helper variables for cross-platform compatibility");
            sb.AppendLine("space := $(empty) $(empty)");
            sb.AppendLine("comma := ,");
            sb.AppendLine();
            sb.AppendLine("# Detect operating system for cross-platform compatibility");
            sb.AppendLine("ifeq ($(OS),Windows_NT)");
            sb.AppendLine("   detected_OS := Windows");
            sb.AppendLine("   MKDIR = if not exist \"$(subst /,\\,$(1))\" mkdir \"$(subst /,\\,$(1))\"");
            sb.AppendLine("   RMDIR = if exist \"$(subst /,\\,$(1))\" rmdir /s /q \"$(subst /,\\,$(1))\"");
            sb.AppendLine("   RM = if exist \"$(subst /,\\,$(1))\" del /q \"$(subst /,\\,$(1))\"");
            sb.AppendLine("   MOVE = if exist \"$(subst /,\\,$(1))\" move \"$(subst /,\\,$(1))\" \"$(subst /,\\,$(2))\"");
            sb.AppendLine("   PATH_SEP = \\\\");
            sb.AppendLine("   NULL_DEVICE = nul");
            sb.AppendLine("else");
            sb.AppendLine("   detected_OS := $(shell uname -s)");
            sb.AppendLine("   MKDIR = mkdir -p $(1)");
            sb.AppendLine("   RMDIR = rm -rf $(1)");
            sb.AppendLine("   RM = rm -f $(1)");
            sb.AppendLine("   MOVE = if [ -f \"$(1)\" ]; then mv \"$(1)\" \"$(2)\"; fi");
            sb.AppendLine("   PATH_SEP = /");
            sb.AppendLine("   NULL_DEVICE = /dev/null");
            sb.AppendLine("endif");
            sb.AppendLine();
            sb.AppendLine("# Project directories expected in the project.");
            sb.AppendLine("# These directories are created if they do not exist when \"make build_dir\" is run.");
            sb.AppendLine("# The directories are used to store object files, binaries, source files, include files, and other files.");
            sb.AppendLine("# The directories are created relative to the project root directory.");
            sb.AppendLine("# The project root directory is expected to be one level above the srcs directory.");
            sb.AppendLine("# The project root directory is expected to contain the srcs, objs, incs, bins, and other directories.");
            sb.AppendLine("ROOT     := ..");
            sb.AppendLine("OBJ_DIR  := $(ROOT)/objs");
            sb.AppendLine("INC_DIR  := $(ROOT)/incs");
            sb.AppendLine("BIN_DIR  := $(ROOT)/bins");
            sb.AppendLine("SRC_DIR  := $(ROOT)/srcs");
            sb.AppendLine("OUT_DIR  := $(ROOT)/other");
            sb.AppendLine();
            sb.AppendLine("# Source files and object files");
            sb.AppendLine("# The source files are expected to be in the srcs directory & sub-directories.");
            sb.AppendLine("# The source files are expected to have the .c extension.");
            sb.AppendLine("# The object file list is created from the SRCS variable with the .o extension in place of the .c extension.");
            sb.AppendLine("# Dynamically find all .c files using Make functions (up to 4 levels deep)");
            sb.AppendLine("define get_c_files");
            sb.AppendLine("$(wildcard $(1)/*.c) $(wildcard $(1)/*/*.c) $(wildcard $(1)/*/*/*.c) $(wildcard $(1)/*/*/*/*.c)");
            sb.AppendLine("endef");
            sb.AppendLine("SRCS := $(call get_c_files,$(SRC_DIR))");
            sb.AppendLine("OBJS := $(SRCS:$(SRC_DIR)/%.c=$(OBJ_DIR)/%.o)");
            sb.AppendLine();
            sb.AppendLine("# The assembly files are expected to be in the srcs directory & sub-directories.");
            sb.AppendLine("# Dynamically find all .S files using Make functions (up to 4 levels deep)");
            sb.AppendLine("define get_s_files");
            sb.AppendLine("$(wildcard $(1)/*.S) $(wildcard $(1)/*/*.S) $(wildcard $(1)/*/*/*.S) $(wildcard $(1)/*/*/*/*.S)");
            sb.AppendLine("endef");
            sb.AppendLine("ASM := $(call get_s_files,$(SRC_DIR))");
            sb.AppendLine("ASMS := $(ASM:$(SRC_DIR)/%.S=$(OBJ_DIR)/%.o)");
            sb.AppendLine();
            sb.AppendLine("# The assembly object files are created from the ASM variable with the .o extension in place of the .S extension.");
            sb.AppendLine("# The assembly object files are added to the OBJS variable.");
            sb.AppendLine("# This allows the assembly files to be compiled and linked with the C source files.");
            sb.AppendLine("# The assembly files are expected to be in the srcs directory & sub-directories.");
            sb.AppendLine("# The assembly files are expected to have the .S extension.");
            sb.AppendLine("# The assembly files are expected to be compiled with the same compiler as the C source files.");
            sb.AppendLine("# The assembly files are expected to be compiled with the same flags as the C source files.");
            sb.AppendLine("OBJS += $(ASMS)");
            sb.AppendLine();
            sb.AppendLine("# Compiler and flags");
            sb.AppendLine("COMPILER  := c99");
            sb.AppendLine("ifeq ($(COMPILER),c99)");
            sb.AppendLine("CC := \"$(COMPILER_LOCATION)/xc32-gcc\"");
            sb.AppendLine("MCU := -mprocessor=$(DEVICE)");
            sb.AppendLine("STD := c99");
            sb.AppendLine("FLAGS := -Werror -Wall -MP -MMD");
            sb.AppendLine("else");
            sb.AppendLine("CC := \"$(COMPILER_LOCATION)/xc32\"");
            sb.AppendLine("MCU := -mprocessor=$(DEVICE)");
            sb.AppendLine("STD := c90");
            sb.AppendLine("endif");
            sb.AppendLine();
            sb.AppendLine("# Assign all Include directories dynamically, first run \"make build_dir\" from terminal.");
            sb.AppendLine("# Get all directories under INC_DIR recursively (up to 4 levels deep)");
            sb.AppendLine("define get_inc_dirs");
            sb.AppendLine("$(sort $(dir $(wildcard $(1)/*/)) $(dir $(wildcard $(1)/*/*/)) $(dir $(wildcard $(1)/*/*/*/)) $(dir $(wildcard $(1)/*/*/*/*/)))");
            sb.AppendLine("endef");
            sb.AppendLine("INC_SUBDIRS := $(call get_inc_dirs,$(INC_DIR))");
            sb.AppendLine("# Remove trailing slashes and add -I prefix for each directory");
            sb.AppendLine("INC_FLAGS := $(foreach d,$(patsubst %/,%,$(INC_SUBDIRS)),-I\"$(d)\")");
            sb.AppendLine("INCS := -I\"$(INC_DIR)\" $(INC_FLAGS) -I\"$(DFP_INCLUDE)\"");
            sb.AppendLine();
            sb.AppendLine("# Direct the compiler outputs for .o files from .c or .cpp code");
            sb.AppendLine("DIRECT_OBJ := $(CC) -g -x c -c $(MCU) -ffunction-sections -fdata-sections -O1 -fno-common $(INCS) $(FLAGS) -MF $(@:.o=.d) -DXPRJ_default=default -mdfp=\"$(DFP)\"");
            sb.AppendLine();
            sb.AppendLine("# Direct compiler output for linker");
            sb.AppendLine("LINKER_SCRIPT := $(DFP)/xc32/$(DEVICE)/p32MZ1024EFH064.ld");
            sb.AppendLine("DIRECT_LINK := $(CC) $(MCU) -nostartfiles -DXPRJ_default=default -mdfp=\"$(DFP)\" -Wl,--defsym=__MPLAB_BUILD=1,--script=\"$(LINKER_SCRIPT)\",--defsym=_min_heap_size=512,--gc-sections,--no-code-in-dinit,--no-dinit-in-serial-mem,-Map=\"$(OUT_DIR)/production.map\",--memorysummary,$(OUT_DIR)/memoryfile.xml");
            sb.AppendLine();
            sb.AppendLine("DIRECT_ASM :=   -c  -DXPRJ_default=default    -Wa,--defsym=__MPLAB_BUILD=1,-MD=$(OBJ_DIR)/startup/startup.o.asm.d,--gdwarf-2 -mdfp=\"$(DFP)\" -MMD -MF $(OBJ_DIR)/startup/startup.o.d");
            sb.AppendLine();
            sb.AppendLine("# Define the default target (which is built when make is invoked without any arguments)");
            sb.AppendLine("$(BIN_DIR)/$(MODULE): $(OBJS)");
            sb.AppendLine("\t@echo \"Building project for $(DEVICE)\"");
            sb.AppendLine("\t@echo \"Linking object files to create the final executable\"");
            sb.AppendLine("\t$(DIRECT_LINK) -o $@ $^");
            sb.AppendLine("\t@echo \"Build complete. Output is in $(BIN_DIR)\"");
            sb.AppendLine();
            sb.AppendLine("# Compile all source files to object files");
            sb.AppendLine("$(OBJ_DIR)/%.o: $(SRC_DIR)/%.c");
            sb.AppendLine("\t@echo \"Compiling $< to $@\"");
            sb.AppendLine("\t@$(call MKDIR,$(dir $@))");
	        sb.AppendLine("\t$(DIRECT_OBJ) $< -o $@");
            sb.AppendLine("\t@echo \"Object file created: $@\"");
            sb.AppendLine();
            sb.AppendLine("$(OBJ_DIR)/%.o: $(SRC_DIR)/%.S");
            sb.AppendLine("\t@echo \"Compiling assembly file $< to object file $@\"");
            sb.AppendLine("\t@$(call MKDIR,$(dir $@))");
	        sb.AppendLine("\t$(CC) $(MCU) $(DIRECT_ASM) -o $@ $<");
            sb.AppendLine("\t@echo \"Object file created: $@\"");
            sb.AppendLine();
            sb.AppendLine(".PHONY: clean build_dir debug help platform");
            sb.AppendLine();
            sb.AppendLine("# Show platform-specific configuration");
            sb.AppendLine("platform:");
            sb.AppendLine("\t@echo \"Cross-platform build configuration:\"");
            sb.AppendLine("\t@echo \"Detected OS: $(detected_OS)\"");
            sb.AppendLine("\t@echo \"Path separator: $(PATH_SEP)\"");
            sb.AppendLine("\t@echo \"Null device: $(NULL_DEVICE)\"");
            sb.AppendLine("\t@echo \"MKDIR command: $(value MKDIR)\"");
            sb.AppendLine("\t@echo \"RMDIR command: $(value RMDIR)\"");
            sb.AppendLine("\t@echo \"RM command: $(value RM)\"");
            sb.AppendLine("\t@echo \"MOVE command: $(value MOVE)\"");
            sb.AppendLine();
            sb.AppendLine("# Create the build directories if they do not exist");
            sb.AppendLine("# This target is used to create the necessary directories for the build process.");
            sb.AppendLine("# It creates the OBJ_DIR, BIN_DIR, SRC_DIR, INC_DIR, and OUT_DIR");
            sb.AppendLine("# It also creates subdirectories in OBJ_DIR and INC_DIR for each subdirectory in SRC_DIR");
            sb.AppendLine("# This is useful for organizing the build output and include files.");
            sb.AppendLine("# To run this target, use: make build_dir");
            sb.AppendLine("# Get all directories under SRC_DIR dynamically (similar to how we get source files)");
            sb.AppendLine("SRC_DIRS := $(sort $(dir $(wildcard $(SRC_DIR)/*/)) $(dir $(wildcard $(SRC_DIR)/*/*/)) $(dir $(wildcard $(SRC_DIR)/*/*/*/)) $(dir $(wildcard $(SRC_DIR)/*/*/*/*/)))");
            sb.AppendLine("# Filter out startup directory from automatic creation and convert to relative paths");
            sb.AppendLine("SRC_SUBDIRS := $(sort $(filter-out startup/,$(SRC_DIRS:$(SRC_DIR)/%=%)))");
            sb.AppendLine();
            sb.AppendLine("build_dir:");
            sb.AppendLine("\t@echo \"Creating build base directories if they do not exist ($(detected_OS))\"");
            sb.AppendLine("\t@$(call MKDIR,$(OBJ_DIR))");
            sb.AppendLine("\t@$(call MKDIR,$(BIN_DIR))");
            sb.AppendLine("\t@$(call MKDIR,$(SRC_DIR))");
            sb.AppendLine("\t@$(call MKDIR,$(INC_DIR))");
            sb.AppendLine("\t@$(call MKDIR,$(OUT_DIR))");
            sb.AppendLine("\t@echo \"Creating subdirectories in OBJ_DIR and INC_DIR based on SRC_DIR structure\"");
            sb.AppendLine("\t@$(foreach subdir,$(SRC_SUBDIRS),$(call MKDIR,$(OBJ_DIR)/$(subdir)) && $(call MKDIR,$(INC_DIR)/$(subdir)) &&) echo \"Created peripheral directories\"");
            sb.AppendLine("\t@echo \"Moving header files from src subdirectories to corresponding inc subdirectories\"");
            sb.AppendLine("\t@$(foreach subdir,$(SRC_SUBDIRS),$(foreach header,$(wildcard $(SRC_DIR)/$(subdir)*.h),$(call MOVE,$(header),$(INC_DIR)/$(subdir)) &&)) echo \"Headers moved\"");
            sb.AppendLine("\t@echo \"Build directories created successfully\"");
            sb.AppendLine();
            sb.AppendLine("# Display the source files, object files, and include directories");
            sb.AppendLine("debug:");
            sb.AppendLine("\t@echo \"Build system debug info ($(detected_OS)):\"");
            sb.AppendLine("\t@echo \"Source files:\"");
            sb.AppendLine("\t@$(foreach src,$(SRCS),echo \"  $(src)\" &&) echo \"\"");
            sb.AppendLine("\t@echo \"Object files:\"");
            sb.AppendLine("\t@$(foreach obj,$(OBJS),echo \"  $(obj)\" &&) echo \"\"");
            sb.AppendLine("\t@echo \"Include directories:\"");
            sb.AppendLine("\t@$(foreach inc,$(subst -I\"\",,$(subst \"\",,$(INCS))),echo \"  -I\"$(inc)\" &&) echo \"\"");
            sb.AppendLine("\t@echo \"Include subdirectories found:\"");
            sb.AppendLine("\t@$(foreach dir,$(INC_SUBDIRS),echo \"  $(dir)\" &&) echo \"\"");
            sb.AppendLine("\t@echo \"Include flags generated:\"");
            sb.AppendLine("\t@$(foreach flag,$(INC_FLAGS),echo \"  $(flag)\" &&) echo \"\"");
            sb.AppendLine("\t@echo \"Source subdirectories found:\"");
            sb.AppendLine("\t@$(foreach dir,$(SRC_SUBDIRS),echo \"  $(dir)\" &&) echo \"\"");
            sb.AppendLine("\t@echo \"DFP Include path:\"");
            sb.AppendLine("\t@echo \"  $(DFP_INCLUDE)\"");
            sb.AppendLine("\t@echo \"Linker script:\"");
            sb.AppendLine("\t@echo \"  $(LINKER_SCRIPT)\"");
            sb.AppendLine();
            sb.AppendLine("# For xc32 Compiler help with less use: make help less");
            sb.AppendLine("# For xc32 Compiler help without less use: make help");
            sb.AppendLine("help:");
            sb.AppendLine("\t@echo \"Displaying help information for xc32-gcc\"");
            sb.AppendLine("ifeq ($(filter less,$(MAKECMDGOALS)),less)");
            sb.AppendLine("\txc32-gcc --help | less");
            sb.AppendLine("else");
            sb.AppendLine("\txc32-gcc --help");
            sb.AppendLine("endif");
            sb.AppendLine();
            sb.AppendLine("clean:");
            sb.AppendLine("\t@echo \"Cleaning up object files and binaries ($(detected_OS))\"");
            sb.AppendLine("\t@$(call RM,$(BIN_DIR)/*) 2>$(NULL_DEVICE) || true");
            sb.AppendLine("\t@$(call RMDIR,$(OBJ_DIR)) 2>$(NULL_DEVICE) || true");
            sb.AppendLine("\t@$(call MKDIR,$(OBJ_DIR))");
            sb.AppendLine("\t@$(call RM,$(OUT_DIR)/*) 2>$(NULL_DEVICE) || true");
            sb.AppendLine("\t@echo \"Clean complete.\"");
            sb.AppendLine();
            sb.AppendLine("define clear_build_dir");
            sb.AppendLine("\t-rm -rf $(BIN_DIR)/* $(OBJ_DIR)/* $(OUT_DIR)/* 2>/dev/null || true");
            sb.AppendLine("endef");
            sb.AppendLine();
            sb.AppendLine("##################################################################################################");
            sb.AppendLine("##                       Table 5-6. Kind-of-Output Control Options                                ##");
            sb.AppendLine("##################################################################################################");
            sb.AppendLine("# Option      |  Definition");
            sb.AppendLine("# -----------------------------------------------------------------------------------------------");
            sb.AppendLine("# -c          |  Stop compilation before the link step, producing an intermediate file.");
            sb.AppendLine("# -E          |  Stop compilation after preprocessing, producing a preprocessed file.");
            sb.AppendLine("# --help      |  Print a description of the command line options.");
            sb.AppendLine("# -o file     |Place the output in a file with the specified name.");
            sb.AppendLine("# -S          |  Stop compilation before the assembly step, producing an assembly file output.");
            sb.AppendLine("# -specs=file |  Overrides the standard specs file.");
            sb.AppendLine("# -v          |  Print the commands executed during each stage of compilation.");
            sb.AppendLine("# --version   |  Show version information then quit.");
            sb.AppendLine("# -x          |  Specify the language of a source file regardless of its file extension.");
            sb.AppendLine("#################################################################################################");
            sb.AppendLine();

            return sb.ToString();
        }

        public string Get_RootMakefileContent()
        {
           var sb = new StringBuilder();

            sb.AppendLine("# Simple Makefile for PIC32MZ project");
            sb.AppendLine("# Name of the project binary");
            sb.AppendLine($"MODULE     := {Module}");
            sb.AppendLine();
            sb.AppendLine("# Device configuration");
            sb.AppendLine("# The device is expected to be a PIC32MZ family device.");
            sb.AppendLine($"DEVICE     := {Device}");
            sb.AppendLine();
            sb.AppendLine("# Compiler location and DFP (Device Family Pack) location");
            sb.AppendLine("# The compiler location is expected to be the path to the xc32-gcc compiler.");
            sb.AppendLine("# The DFP location is expected to be the path to the Microchip Device Family Pack.");
            sb.AppendLine("# The DFP is used to provide the necessary header files and libraries for the specific device.");
            sb.AppendLine("# The DFP is expected to be installed in the MPLAB X IDE installation directory.");
            sb.AppendLine("# The DFP is expected to be in the packs directory of the MPLAB X IDE installation directory.");
            sb.AppendLine("# The DFP is expected to be in the format of Microchip/PIC32MZ-EF_DFP/1.4.168.");
            sb.AppendLine("# Cross-platform compiler and DFP paths");
            sb.AppendLine("ifeq ($(OS),Windows_NT)");
            sb.AppendLine("    COMPILER_LOCATION := C:/Program Files/Microchip/xc32/v4.60/bin");
            sb.AppendLine("    DFP_LOCATION := C:/Program Files/Microchip/MPLABX/v6.25/packs");
            sb.AppendLine("else");
            sb.AppendLine("    COMPILER_LOCATION := /opt/microchip/xc32/v4.60/bin");
            sb.AppendLine("    DFP_LOCATION := /opt/microchip/mplabx/v6.25/packs");
            sb.AppendLine("endif");
            sb.AppendLine("DFP := $(DFP_LOCATION)/Microchip/PIC32MZ-EF_DFP/1.4.168");
            sb.AppendLine();
            sb.AppendLine("# Simple Unix-style build system");
            sb.AppendLine("BUILD=make");
            sb.AppendLine("CLEAN=make clean");
            sb.AppendLine("BUILD_DIR=make build_dir");
            sb.AppendLine();
            sb.AppendLine("all:");
            sb.AppendLine("\t@echo \"######  BUILDING   ########\"");
            sb.AppendLine("\tcd srcs && $(BUILD) COMPILER_LOCATION=\"$(COMPILER_LOCATION)\" DFP_LOCATION=\"$(DFP_LOCATION)\" DFP=\"$(DFP)\" DEVICE=$(DEVICE) MODULE=$(MODULE)");
            sb.AppendLine("\t@echo \"###### BIN TO HEX ########\"");
            sb.AppendLine("\tcd bins && \"$(COMPILER_LOCATION)/xc32-bin2hex\" $(MODULE)");
            sb.AppendLine("\t@echo \"######  BUILD COMPLETE   ########\"");
            sb.AppendLine();
            sb.AppendLine("build_dir:");
            sb.AppendLine("\t@echo \"#######BUILDING DIRECTORIES FOR OUTPUT BINARIES#######\"");
            sb.AppendLine("\tcd srcs && $(BUILD_DIR)");
            sb.AppendLine();
            sb.AppendLine("debug:");
            sb.AppendLine("\t@echo \"#######DEBUGGING OUTPUTS#######\"");
            sb.AppendLine("\tcd srcs && $(BUILD) debug COMPILER_LOCATION=\"$(COMPILER_LOCATION)\" DFP_LOCATION=\"$(DFP_LOCATION)\" DFP=\"$(DFP)\" DEVICE=$(DEVICE) MODULE=$(MODULE)");
            sb.AppendLine();
            sb.AppendLine("platform:");
            sb.AppendLine("\t@echo \"#######PLATFORM INFO#######\"");
            sb.AppendLine("\tcd srcs && $(BUILD) platform COMPILER_LOCATION=\"$(COMPILER_LOCATION)\" DFP_LOCATION=\"$(DFP_LOCATION)\" DFP=\"$(DFP)\" DEVICE=$(DEVICE) MODULE=$(MODULE)");
            sb.AppendLine();
            sb.AppendLine("clean:");
            sb.AppendLine("\t@echo \"####### CLEANING OUTPUTS #######\"");
            sb.AppendLine("\tcd srcs && $(CLEAN)");
            sb.AppendLine("\t@echo \"####### REMOVING BUILD ARTIFACTS #######\"");
            sb.AppendLine("ifeq ($(OS), Windows_NT)");
            sb.AppendLine("\t@\"C:\\Program Files\\Git\\bin\\bash.exe\" - c \"rm -rf bins/* objs/* other/* 2>/dev/null || true\"");
            sb.AppendLine("else");
            sb.AppendLine("\t@rm -rf bins/* objs/* other/* 2>/dev/null || true");
            sb.AppendLine("endif");
            sb.AppendLine();
            sb.AppendLine("install:");
            sb.AppendLine("\tcd srcs && $(BUILD) install");
            sb.AppendLine();
            sb.AppendLine("flash:");
            sb.AppendLine("\t@echo \"#######LOADING OUTPUTS#######\"");
            sb.AppendLine("\tcd bins && sudo ../../MikroC_bootloader_lnx/bins/mikro_hb $(MODULE).hex");
            sb.AppendLine("\t@echo \"#######LOAD COMPLETE#######\"");
            sb.AppendLine();
            sb.AppendLine("dfp_dir:");
            sb.AppendLine("\t@echo \"####### DFP DIRECTORY #######\"");
            sb.AppendLine("\t@echo $(DFP)");
            sb.AppendLine();
            sb.AppendLine("help:");
            sb.AppendLine("\t@echo \"####### HELP #######\"");
            sb.AppendLine("\tcd srcs && $(BUILD) help");
            sb.AppendLine("\t@echo \"#####################\"");
            sb.AppendLine();
            sb.AppendLine("# Unix-style utility targets (cross-platform)");
            sb.AppendLine("find-source:");
            sb.AppendLine("\t@echo \"####### FINDING SOURCE FILES #######\"");
            sb.AppendLine("ifeq ($(OS),Windows_NT)");
            sb.AppendLine("\t@powershell -Command \"Get-ChildItem -Recurse srcs -Include *.c,*.h | Select-Object -ExpandProperty FullName\"");
            sb.AppendLine("else");
            sb.AppendLine("\t@find srcs -name \"*.c\" -o -name \"*.h\"");
            sb.AppendLine("endif");
            sb.AppendLine();
            sb.AppendLine("grep-pattern:");
            sb.AppendLine("\t@echo \"####### SEARCHING FOR PATTERN (usage: make grep-pattern PATTERN=your_pattern) #######\"");
            sb.AppendLine("ifeq ($(OS),Windows_NT)");
            sb.AppendLine("\t@powershell -Command \"Select-String -Pattern '$(PATTERN)' -Path 'srcs\\*' -Recurse || Write-Host 'No matches found'\"");
            sb.AppendLine("else");
            sb.AppendLine("\t@grep -r \"$(PATTERN)\" srcs/ || echo \"No matches found\"");
            sb.AppendLine("endif");
            sb.AppendLine();
            sb.AppendLine("list-files:");
            sb.AppendLine("\t@echo \"####### LISTING PROJECT FILES #######\"");
            sb.AppendLine("ifeq ($(OS),Windows_NT)");
            sb.AppendLine("\t@dir /b");
            sb.AppendLine("else");
            sb.AppendLine("\t@ls -la");
            sb.AppendLine("endif");
            sb.AppendLine();
            sb.AppendLine(".PHONY: all build_dir clean install find-source grep-pattern list-files debug platform");
            sb.AppendLine();


            return sb.ToString();
        }
    }

    }

