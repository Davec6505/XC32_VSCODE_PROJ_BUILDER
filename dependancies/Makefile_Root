# Simple Makefile for PIC32MZ project
# Name of the project binary
MODULE     := CS21

# Device configuration
# The device is expected to be a PIC32MZ family device.
DEVICE     := 32MZ2048EFH064

# Compiler location and DFP (Device Family Pack) location
# The compiler location is expected to be the path to the xc32-gcc compiler.
# The DFP location is expected to be the path to the Microchip Device Family Pack.
# The DFP is used to provide the necessary header files and libraries for the specific device.
# The DFP is expected to be installed in the MPLAB X IDE installation directory.
# The DFP is expected to be in the packs directory of the MPLAB X IDE installation directory.
# The DFP is expected to be in the format of Microchip/PIC32MZ-EF_DFP/1.4.168.
# Cross-platform compiler and DFP paths
ifeq ($(OS),Windows_NT)
    COMPILER_LOCATION := C:/Program Files/Microchip/xc32/v4.60/bin
	DFP_LOCATION := C:/Users/Automation/.mchp_packs
 #   DFP_LOCATION := C:/Program Files/Microchip/MPLABX/v6.25/packs
else
    COMPILER_LOCATION := /opt/microchip/xc32/v4.60/bin
    DFP_LOCATION := /opt/microchip/mplabx/v6.25/packs
endif
#DFP := $(DFP_LOCATION)/Microchip/PIC32MZ-EF_DFP/1.4.168
DFP := $(DFP_LOCATION)/Microchip/PIC32MZ-EF_DFP/1.5.173
#C:/Users/Automation/.mchp_packs/Microchip/PIC32MZ-EF_DFP/1.5.173

# Simple Unix-style build system
BUILD=make
CLEAN=make clean DRY_RUN=$(DRY_RUN)
BUILD_DIR=make build_dir

all:
	@echo "######  BUILDING   ########"
	cd srcs && $(BUILD) COMPILER_LOCATION="$(COMPILER_LOCATION)" DFP_LOCATION="$(DFP_LOCATION)" DFP="$(DFP)" DEVICE=$(DEVICE) MODULE=$(MODULE)
	@echo "###### BIN TO HEX ########"
	cd bins && "$(COMPILER_LOCATION)/xc32-bin2hex" $(MODULE)
	@echo "######  BUILD COMPLETE   ########"

build_dir:
	@echo "###### BUILDING DIRECTORIES FOR OUTPUT BINARIES #######"
	cd srcs && $(BUILD_DIR)
	@echo "############ BUILDING DIRECTORIES COMPLETED ###########"

debug:
	@echo "####### DEBUGGING OUTPUTS #######"
	cd srcs && $(BUILD) debug COMPILER_LOCATION="$(COMPILER_LOCATION)" DFP_LOCATION="$(DFP_LOCATION)" DFP="$(DFP)" DEVICE=$(DEVICE) MODULE=$(MODULE)

platform:
	@echo "####### PLATFORM INFO #######"
	cd srcs && $(BUILD) platform COMPILER_LOCATION="$(COMPILER_LOCATION)" DFP_LOCATION="$(DFP_LOCATION)" DFP="$(DFP)" DEVICE=$(DEVICE) MODULE=$(MODULE)

clean:
	@echo "####### CLEANING OUTPUTS #######"
	cd srcs && $(CLEAN)


rem_dir:
	@echo "####### REMOVING BUILD DIRECTORIES #######"
	cd srcs && $(BUILD) rem_dir DRY_RUN=$(DRY_RUN) DEL_PATH=$(DIR_PATH)

mk_dir:
	@echo "####### CREATING BUILD DIRECTORIES #######"
	cd srcs && $(BUILD) mk_dir DIR_PATH=$(DIR_PATH)

install:
	cd srcs && $(BUILD) install

flash:
	@echo "#######LOADING OUTPUTS#######"
	cd bins && sudo ../../MikroC_bootloader_lnx/bins/mikro_hb $(MODULE).hex
	@echo "#######LOAD COMPLETE#######"

dfp_dir:
	@echo "####### DFP DIRECTORY #######"
	@echo $(DFP)

debug_path:
	@echo "####### DEBUGGING PATHS #######"
	cd srcs && $(BUILD) debug_path $(DIR_PATH)

help:
	@echo "####### HELP #######"
	cd srcs && $(BUILD) help
	@echo "#####################"

# Unix-style utility targets (cross-platform)
find-source:
	@echo "####### FINDING SOURCE FILES #######"
ifeq ($(OS),Windows_NT)
	@powershell -Command "Get-ChildItem -Recurse srcs -Include *.c,*.h | Select-Object -ExpandProperty FullName"
else
	@find srcs -name "*.c" -o -name "*.h"
endif

grep-pattern:
	@echo "####### SEARCHING FOR PATTERN (usage: make grep-pattern PATTERN=your_pattern) #######"
ifeq ($(OS),Windows_NT)
	@powershell -Command "Select-String -Pattern '$(PATTERN)' -Path 'srcs\*' -Recurse || Write-Host 'No matches found'"
else
	@grep -r "$(PATTERN)" srcs/ || echo "No matches found"
endif

list-files:
	@echo "####### LISTING PROJECT FILES #######"
ifeq ($(OS),Windows_NT)
	@dir /b
else
	@ls -la
endif


cmdlets:
ifeq ($(OS),Windows_NT)
	@powershell -Command "Write-Host '######################################## BUILD COMMANDS ############################################' -ForegroundColor Green"
	@powershell -Command "Write-Host 'make build_dir            '-ForegroundColor Yellow -NoNewline; Write-Host '- Start by testing build directories output (DRY_RUN=1 default).' -ForegroundColor White"
	@powershell -Command "Write-Host 'make build_dir DRY_RUN=0  '-ForegroundColor Yellow -NoNewline; Write-Host '- Create build directories (set DRY_RUN=1 to simulate).' -ForegroundColor White"
	@powershell -Command "Write-Host 'make all                  '-ForegroundColor Yellow -NoNewline; Write-Host '- Build the project.' -ForegroundColor White"
	@powershell -Command "Write-Host 'make clean                '-ForegroundColor Yellow -NoNewline; Write-Host '- Clean build outputs.' -ForegroundColor White"
	@powershell -Command "Write-Host 'make platform             '-ForegroundColor Yellow -NoNewline; Write-Host '- Show platform information.' -ForegroundColor White"
	@powershell -Command "Write-Host 'make rem_dir DIR_PATH=    '-ForegroundColor Yellow -NoNewline; Write-Host '- Remove specified directory (DIR_PATH=\"\").' -ForegroundColor White"
	@powershell -Command "Write-Host 'make mk_dir DIR_PATH=     '-ForegroundColor Yellow -NoNewline; Write-Host '- Create specified directory (DIR_PATH=\"\").' -ForegroundColor White"
	@powershell -Command "Write-Host 'make dfp_dir              '-ForegroundColor Yellow -NoNewline; Write-Host '- Show the DFP directory.' -ForegroundColor White"
	@powershell -Command "Write-Host 'make debug_path DIR_PATH= '-ForegroundColor Yellow -NoNewline; Write-Host '- Debug specified path (DIR_PATH=\"\").' -ForegroundColor White"
	@powershell -Command "Write-Host 'make help                 '-ForegroundColor Yellow -NoNewline; Write-Host '- Show this help message.' -ForegroundColor White"
	@powershell -Command "Write-Host '#####################################################################################################' -ForegroundColor Green"
else
	@echo -e "$(GREEN)######################################## BUILD COMMANDS ############################################$(NC)"
	@echo "make build_dir          			- Start by testing build directories output (DRY_RUN=1 default)."
	@echo "make build_dir DRY_RUN=0			- Create build directories (set DRY_RUN=1 to simulate)."
	@echo "make all                			- Build the project."
	@echo "make clean              			- Clean build outputs."
	@echo "make platform           			- Show platform information."
	@echo "make rem_dir DIR_PATH=  			- Remove specified directory (DIR_PATH=\"\")."
	@echo "make mk_dir DIR_PATH=   			- Create specified directory (DIR_PATH=\"\")."
	@echo "make dfp_dir            			- Show the DFP directory."
	@echo "make debug_path DIR_PATH			= - Debug specified path (DIR_PATH=\"\")."
	@echo "make help               			- Show this help message."
	@echo -e "$(GREEN)#####################################################################################################$(NC)"
endif

.PHONY: all build_dir clean install find-source grep-pattern list-files debug platform cmdlets

