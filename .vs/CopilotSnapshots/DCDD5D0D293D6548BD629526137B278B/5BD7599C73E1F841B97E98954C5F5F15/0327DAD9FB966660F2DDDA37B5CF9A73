using csharp;
using Microsoft.VisualBasic.ApplicationServices;
using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Forms;



namespace Setup
{



    public partial class Form1 : Form
    {
        // Move the initialization of configBitComboBoxes from field initializer to the constructor

        private Dictionary<string, ComboBox> configBitComboBoxes;

        public Form1()
        {
            InitializeComponent();
            // Initialize the dictionary mapping config bits to their respective ComboBoxes
            configBitComboBoxes = new Dictionary<string, ComboBox>
            {
                // DEVCFG0
                { "DEBUG", comboBox_DEBUG },
                { "JTAGEN", comboBox_JTAGEN },
                { "ICESEL", comboBox_ICESEL },
                { "TRCEN", comboBox_TRCEN },
                { "BOOTISA", comboBox_BOOTISA },
                { "FECCCON", comboBox_FECCCON },
                { "FSLEEP", comboBox_FSLEEP },
                { "DBGPER", comboBox_DBGPER },
                { "SMCLR", comboBox_SMCLR },
                { "SOSCGAIN", comboBox_SOSCGAIN },
                { "SOSCBOOST", comboBox_SOSCBOOST },
                { "POSCGAIN", comboBox_POSCGAIN },
                { "POSCBOOST", comboBox_POSCBOOST },
                { "EJTAGBEN", comboBox_EJTAGBEN },

                // DEVCFG1
                { "FNOSC", comboBox_FNOSC },
                { "DMTINTV", comboBox_DMTINTV },
                { "FSOSCEN", comboBox_FSOSCEN },
                { "IESO", comboBox_IESO },
                { "POSCMOD", comboBox_POSCMOD },
                { "OSCIOFNC", comboBox_OSCIOFNC },
                { "FCKSM", comboBox_FCKSM },
                { "WDTPS", comboBox_WDTPS },
                { "WDTSPGM", comboBox_WDTSPGM },
                { "FWDTEN", comboBox_FWDTEN },
                { "WINDIS", comboBox_WINDIS },
                { "FWDTWINSZ", comboBox_FWDTWINSZ },
                { "DMTCNT", comboBox_DMTCNT },
                { "FDMTEN", comboBox_FDMTEN },

                // DEVCFG2
                { "FPLLIDIV", comboBox_FPLLIDIV },
                { "FPLLRNG", comboBox_FPLLRNG },
                { "FPLLICLK", comboBox_FPLLICLK },
                { "FPLLMULT", comboBox_FPLLMULT },
                { "FPLLODIV", comboBox_FPLLODIV },
                { "UPLLFSEL", comboBox_UPLLFSEL },

                // DEVCFG3
               // { "USERID", comboBox_USERID }, // If you use NumericUpDown, handle separately

                { "FMIIEN", comboBox_FMIIEN },
                { "FETHIO", comboBox_FETHIO },
                { "PGL1WAY", comboBox_PGL1WAY },
                { "PMDL1WAY", comboBox_PMDL1WAY },
                { "IOL1WAY", comboBox_IOL1WAY },
                { "FUSBIDIO", comboBox_FUSBIDIO },

                // DEVCP0
                { "CP", comboBox_CP },

                // BF1SEQ0
               // { "TSEQ", comboBox_TSEQ },
               // { "CSEQ", comboBox_CSEQ }
            };
        }

        private void Form1_Load(object sender, EventArgs e)
        {
            // Hide the taskbar icon and set the form as a tool window
            this.ShowInTaskbar = false;
            this.FormBorderStyle = FormBorderStyle.FixedToolWindow;
            // Do not load configWords or call CreateConfigUI on startup
            LoadConfigToForm();
        }



        #region LOAD/GET CONFIG

        private void LoadConfigToForm()
        {
            var config = DeviceConfig.Load("device_config.json");
            if (config == null || config.ConfigBits == null) return;

            foreach (var bit in config.ConfigBits)
            {
                if (bit.Key == "USERID" && numericUpDown_USERID != null)
                {
                    // Parse the value as needed (e.g., hex or decimal)
                    if (int.TryParse(bit.Value.Replace("0x", ""), System.Globalization.NumberStyles.HexNumber, null, out int userIdValue))
                    {
                        userIdValue = Math.Max((int)numericUpDown_USERID.Minimum, Math.Min(userIdValue, (int)numericUpDown_USERID.Maximum));
                        numericUpDown_USERID.Value = userIdValue;
                    }
                    else
                    {
                        numericUpDown_USERID.Value = 0; // Default/fallback
                    }
                }
                else if (bit.Key == "TSEQ" && numericUpDown_TSEQ != null)
                {
                    if (int.TryParse(bit.Value, out int tseqValue))
                    {
                        tseqValue = Math.Max((int)numericUpDown_TSEQ.Minimum, Math.Min(tseqValue, (int)numericUpDown_TSEQ.Maximum));
                        numericUpDown_TSEQ.Value = tseqValue;
                    }
                    else
                    {
                        numericUpDown_TSEQ.Value = 0; // Default/fallback
                    }
                }
                else if (bit.Key == "CSEQ" && numericUpDown_CSEQ != null)
                {
                    if (int.TryParse(bit.Value, out int cseqValue))
                    {
                        cseqValue = Math.Max((int)numericUpDown_CSEQ.Minimum, Math.Min(cseqValue, (int)numericUpDown_CSEQ.Maximum));
                        numericUpDown_CSEQ.Value = cseqValue;
                    }
                    else
                    {
                        numericUpDown_CSEQ.Value = 0; // Default/fallback
                    }
                }
                else if (configBitComboBoxes.TryGetValue(bit.Key, out var comboBox) && comboBox != null)
                {
                    comboBox.SelectedItem = bit.Value;
                }
            }
        }

        private DeviceConfig GetConfigFromForm()
        {
            var config = new DeviceConfig();
            config.Variant = comboBoxVariant.SelectedItem?.ToString() ?? "MZ"; // Example for variant selection

            // Example for config bits
            config.ConfigBits = new Dictionary<string, string>
            {
                { "DEBUG", comboBox_DEBUG.SelectedItem?.ToString() ?? "OFF" },
                { "JTAGEN", comboBox_JTAGEN.SelectedItem?.ToString() ?? "OFF" },
                // ... add all other config bits, mapping to their respective controls
                { "USERID", numericUpDown_USERID.Text }
            };

            // For USERID (NumericUpDown)
            config.ConfigBits["USERID"] = $"0x{((int)numericUpDown_USERID.Value):X}";

            // Example for PRECONbits
            config.PreconBits = new Dictionary<string, string>
            {
                { "PREFEN", textBoxPREFEN.Text },
                { "PFMWS", textBoxPFMWS.Text },
                { "ECCCON", textBoxECCCON.Text }
            };

            return config;
        }
        #endregion LOAD/GET CONFIG
   

        #region BUTTON EVENTS

        private void buttonSaveConfig_Click(object sender, EventArgs e)
        {
            saveConfig_ToJson();
        }

        private void saveToolStripMenuItem_Click(object sender, EventArgs e)
        {
            saveConfig_ToJson();
            MessageBox.Show("Configuration saved!");
        }

        #endregion BUTTON EVENTS

        #region MENU EVENTS

        private void buttonSaveConfig_Click_1(object sender, EventArgs e)
        {
            saveConfig_ToJson();
            MessageBox.Show("Configuration saved!");
        }


        #endregion MENU EVENTS


        #region HELPER METHODS

        public void saveConfig_ToJson()
        {
            var config = DeviceConfig.Load("device_config.json"); // Load existing config
            if (config == null) config = new DeviceConfig();      // Fallback if file missing
            UpdateConfigFromFormAndCheckKeys(config);              // Update only changed values
            config.Save("device_config.json");                     // Save back to file
            MessageBox.Show("Configuration saved!");
        }

        private void UpdateConfigFromFormAndCheckKeys(DeviceConfig config)
        {
            var foundConfigKeys = new HashSet<string>();
            var foundPreconKeys = new HashSet<string>();

            foreach (Control group in this.Controls)
            {
                if (group is GroupBox)
                {
                    foreach (Control ctrl in group.Controls)
                    {
                        string key = ctrl.Name.Replace("comboBox_", "")
                                              .Replace("numericUpDown_", "")
                                              .Replace("textBox_", "")
                                              .ToUpper();

                        if (ctrl is ComboBox combo)
                        {
                            foundConfigKeys.Add(key);
                            string newValue = combo.SelectedItem?.ToString() ?? "";
                            // Always update or add the key, not just if it exists
                            config.ConfigBits[key] = newValue;
                        }
                        else if (ctrl is NumericUpDown num)
                        {
                            foundConfigKeys.Add(key);
                            string newValue = $"0x{(int)num.Value:X}";
                            if (!config.ConfigBits.TryGetValue(key, out var oldValue) || oldValue != newValue)
                                config.ConfigBits[key] = newValue;
                        }
                        else if (ctrl is TextBox txt)
                        {
                            foundPreconKeys.Add(key);
                            string newValue = txt.Text;
                            if (!config.PreconBits.TryGetValue(key, out var oldValue) || oldValue != newValue)
                                config.PreconBits[key] = newValue;
                        }
                    }
                }
            }

            // Check for missing or extra keys in config
            var missingConfigKeys = config.ConfigBits.Keys.Except(foundConfigKeys).ToList();
            var extraConfigKeys = foundConfigKeys.Except(config.ConfigBits.Keys).ToList();
            var missingPreconKeys = config.PreconBits.Keys.Except(foundPreconKeys).ToList();
            var extraPreconKeys = foundPreconKeys.Except(config.PreconBits.Keys).ToList();

            // You can log or handle these as needed
            if (missingConfigKeys.Count > 0)
                Console.WriteLine("Missing ConfigBits keys in UI: " + string.Join(", ", missingConfigKeys));
            if (extraConfigKeys.Count > 0)
                Console.WriteLine("Extra ConfigBits keys in UI: " + string.Join(", ", extraConfigKeys));
            if (missingPreconKeys.Count > 0)
                Console.WriteLine("Missing PreconBits keys in UI: " + string.Join(", ", missingPreconKeys));
            if (extraPreconKeys.Count > 0)
                Console.WriteLine("Extra PreconBits keys in UI: " + string.Join(", ", extraPreconKeys));
        }

        #endregion HELPER METHODS


    }
}

































































































































































































































































































































































































































































































































