using System;
using System.Collections.Generic;
using System.IO;
using System.Text.Json;
using System.Windows.Forms;

namespace Setup
{
    public class DeviceConfig
    {
        public string Variant { get; set; } = string.Empty; // "MX" or "MZ"
        public Dictionary<string, string> ConfigBits { get; set; } = new();
        public Dictionary<string, string> PreconBits { get; set; } = new();
        public Dictionary<string, Dictionary<string, string>> Sections { get; set; } = new();
        
        // Device Properties
        public string DeviceName { get; set; } = string.Empty;
        public string DeviceArch { get; set; } = string.Empty;
        public string DeviceFamily { get; set; } = string.Empty;
        public string DeviceSeries { get; set; } = string.Empty;
        public uint CpuClockFrequency { get; set; } = 0;

        public static DeviceConfig? Load(string path)
        {
            if (!File.Exists(path))
            {
                MessageBox.Show($"File not found: {path}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
                return null;
            }
            var json = File.ReadAllText(path);

            DeviceConfig? config = null;
            try
            {
                config = JsonSerializer.Deserialize<DeviceConfig>(json, new JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
    
                // If ConfigBits and PreconBits are empty, try to populate them from Sections
                if (config != null)
                {
                    if (config.ConfigBits.Count == 0 && config.Sections != null && config.Sections.Count > 0)
                    {
                        foreach (var section in config.Sections)
                        {
                            foreach (var bit in section.Value)
                            {
                                if (!config.ConfigBits.ContainsKey(bit.Key))
                                    config.ConfigBits[bit.Key] = bit.Value;
                            }
                        }
                    }
                    if (config.PreconBits.Count == 0 && config.Sections != null && config.Sections.TryGetValue("PreconBits", out var precon))
                    {
                        foreach (var kvp in precon)
                        {
                            if (!config.PreconBits.ContainsKey(kvp.Key))
                                config.PreconBits[kvp.Key] = kvp.Value;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                MessageBox.Show($"Error loading JSON: {ex.Message}", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            }

            config ??= new DeviceConfig();
            config.ConfigBits ??= new();
            config.PreconBits ??= new();
            config.Sections ??= new();

            return config;
        }

        public void Save(string path)
        {
            // Include device properties in the saved JSON
            var toSave = new { 
                Sections = this.Sections,
                Variant = this.Variant,
                DeviceName = this.DeviceName,
                DeviceArch = this.DeviceArch,
                DeviceFamily = this.DeviceFamily,
                DeviceSeries = this.DeviceSeries,
                CpuClockFrequency = this.CpuClockFrequency
            };
            var json = JsonSerializer.Serialize(toSave, new JsonSerializerOptions { WriteIndented = true });
            File.WriteAllText(path, json);
        }
    }
}

