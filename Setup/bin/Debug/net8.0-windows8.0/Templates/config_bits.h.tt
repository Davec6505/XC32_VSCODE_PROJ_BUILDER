# 1. Template Directives
<#@ template language="C#" debug="false" hostspecific="true" #>
<#@ output extension=".h" #>
<#@ assembly name="System.Runtime" #>
<#@ assembly name="System.Collections" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ parameter type="System.String" name="ConfigPath" #>

# 2. Configuration Loading and Defaults
<#
    // Robust config path handling (same as C template)
    var configPath = ConfigPath;
    
    if (string.IsNullOrEmpty(configPath))
    {
        configPath = this.Host.ResolvePath("..\\device_config.json");
    }
    
    if (string.IsNullOrEmpty(configPath) || !File.Exists(configPath))
    {
        var possiblePaths = new[] {
            this.Host.ResolvePath("device_config.json"),
            this.Host.ResolvePath("..\\device_config.json"),
            this.Host.ResolvePath("..\\..\\device_config.json"),
            Path.Combine(Environment.CurrentDirectory, "device_config.json")
        };
        
        foreach (var testPath in possiblePaths)
        {
            if (!string.IsNullOrEmpty(testPath) && File.Exists(testPath))
            {
                configPath = testPath;
                break;
            }
        }
    }
    
    if (string.IsNullOrEmpty(configPath) || !File.Exists(configPath))
    {
        throw new FileNotFoundException($"Configuration file not found. Searched: {ConfigPath ?? "null"}");
    }
    
    // Simple JSON parsing without JsonSerializer (to avoid System.Memory conflicts)
    string configJson = File.ReadAllText(configPath);
    
    // Default values
    string variant = "MZ";
    string deviceName = "PIC32MZ2048EFH064";
    string deviceArch = "MIPS";
    string deviceFamily = "PIC32MZEF";
    string deviceSeries = "PIC32MZ";
    uint cpuClockFrequency = 200000000U;
    
    try 
    {
        // Simple string-based extraction to avoid JsonSerializer
        if (configJson.Contains("\"Variant\""))
        {
            var variantMatch = System.Text.RegularExpressions.Regex.Match(configJson, "\"Variant\"\\s*:\\s*\"([^\"]+)\"");
            if (variantMatch.Success)
            {
                variant = variantMatch.Groups[1].Value;
            }
        }
        
        if (configJson.Contains("\"DeviceName\""))
        {
            var deviceMatch = System.Text.RegularExpressions.Regex.Match(configJson, "\"DeviceName\"\\s*:\\s*\"([^\"]+)\"");
            if (deviceMatch.Success)
            {
                deviceName = deviceMatch.Groups[1].Value;
            }
        }
        
        if (configJson.Contains("\"DeviceArch\""))
        {
            var archMatch = System.Text.RegularExpressions.Regex.Match(configJson, "\"DeviceArch\"\\s*:\\s*\"([^\"]+)\"");
            if (archMatch.Success)
            {
                deviceArch = archMatch.Groups[1].Value;
            }
        }
        
        if (configJson.Contains("\"DeviceFamily\""))
        {
            var familyMatch = System.Text.RegularExpressions.Regex.Match(configJson, "\"DeviceFamily\"\\s*:\\s*\"([^\"]+)\"");
            if (familyMatch.Success)
            {
                deviceFamily = familyMatch.Groups[1].Value;
            }
        }
        
        if (configJson.Contains("\"DeviceSeries\""))
        {
            var seriesMatch = System.Text.RegularExpressions.Regex.Match(configJson, "\"DeviceSeries\"\\s*:\\s*\"([^\"]+)\"");
            if (seriesMatch.Success)
            {
                deviceSeries = seriesMatch.Groups[1].Value;
            }
        }
        
        if (configJson.Contains("\"CpuClockFrequency\""))
        {
            var freqMatch = System.Text.RegularExpressions.Regex.Match(configJson, "\"CpuClockFrequency\"\\s*:\\s*(\\d+)");
            if (freqMatch.Success)
            {
                uint.TryParse(freqMatch.Groups[1].Value, out cpuClockFrequency);
            }
        }
    }
    catch 
    {
        // If parsing fails, use defaults based on variant detection
        if (configJson.Contains("\"MX\""))
        {
            variant = "MX";
            deviceName = "PIC32MX795F512L";
            deviceFamily = "PIC32MX";
            deviceSeries = "PIC32MX";
            cpuClockFrequency = 80000000U;
        }
    }

    // Final validation based on variant
    if (variant == "MX")
    {
        if (deviceName.Contains("MZ") || deviceName == "PIC32MZ2048EFH064")
        {
            deviceName = "PIC32MX795F512L";
        }
        if (deviceFamily == "PIC32MZEF")
        {
            deviceFamily = "PIC32MX";
        }
        if (deviceSeries == "PIC32MZ")
        {
            deviceSeries = "PIC32MX";
        }
        if (cpuClockFrequency == 200000000U)
        {
            cpuClockFrequency = 80000000U;
        }
    }
#>

# 3. Header Guards and Includes
#ifndef DEFINITIONS_H
#define DEFINITIONS_H

// *****************************************************************************
// Section: Included Files - Generated from: <#= Path.GetFileName(configPath) #>
// *****************************************************************************
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <xc.h>
#include <sys/attribs.h>
#include "toolchain_specifics.h"

// DOM-IGNORE-BEGIN
#ifdef __cplusplus
extern "C" {
#endif
// DOM-IGNORE-END

/* Device Information */
#define DEVICE_NAME          "<#= deviceName #>"
#define DEVICE_ARCH          "<#= deviceArch #>"
#define DEVICE_FAMILY        "<#= deviceFamily #>"
#define DEVICE_SERIES        "<#= deviceSeries #>"

/* CPU clock frequency */
#define CPU_CLOCK_FREQUENCY <#= cpuClockFrequency #>U

// *****************************************************************************
// *****************************************************************************
// Section: System Service Definitions
// *****************************************************************************
// *****************************************************************************
void SYS_Initialize(void *data);
void CLK_Initialize(void);

// *****************************************************************************
// *****************************************************************************
// Section: Library/Stack Definitions
// *****************************************************************************
// *****************************************************************************
void STACK_Init(void);

// *****************************************************************************
// *****************************************************************************
// Section: Driver Definitions
// *****************************************************************************
// *****************************************************************************
void DRV_TimerInitialize(void);
void DRV_USARTInitialize(void);

// *****************************************************************************
// *****************************************************************************
// Section: System Data Types
// *****************************************************************************
// *****************************************************************************
typedef struct
{
    uint32_t baudRate;
    uint8_t  dataBits;
    uint8_t  stopBits;
    uint8_t  parity;
} USART_CONFIG;

// *****************************************************************************
// *****************************************************************************
// Section: Configuration System Service Definitions
// *****************************************************************************
// *****************************************************************************

// DOM-IGNORE-BEGIN
#ifdef __cplusplus
}
#endif
// DOM-IGNORE-END

#endif /* DEFINITIONS_H */